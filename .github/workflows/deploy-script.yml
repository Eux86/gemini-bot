name: Deploy

on: [push]

jobs:
#  linting:
#    runs-on: ubuntu-latest
#    steps:
#      - uses: actions/checkout@v1
#      - name: npm install
#        run: npm ci
#      - name: test
#        run: ls
#      - run: npm run lint
#  testing:
#    runs-on: ubuntu-latest
#    steps:
#      - uses: actions/checkout@v1
#      - name: npm install
#        run: npm ci
#      - run: npm run test
#
#  building:
#    runs-on: ubuntu-latest
#    steps:
#      - uses: actions/checkout@v1
#      - name: npm install
#        run: npm ci
#      - run: npm run build
#      - name: 'Tar files'
#        run: tar -cvf base-folder.tar ./
#      - uses: actions/upload-artifact@master
#        with:
#          name: base-folder
#          path: base-folder.tar
#          retention-days: 1

  deploy:
    runs-on: ubuntu-latest
#    needs: [building, linting, testing]
#    if: github.ref == 'refs/heads/master'
    steps:
    - uses: actions/checkout@v1
#    - uses: actions/download-artifact@master
#      with:
#        name: base-folder
#    - name: 'Untar files'
#      run: tar -xf ./base-folder.tar
    - name: configure ssh connection
      env:
        SSH_AUTH_SOCK: /tmp/ssh_agent.sock
      run: |
        mkdir -p ~/.ssh
        ssh-keyscan -p ${{ secrets.TEST_PORT}} -t rsa ${{ secrets.TEST_HOST }} >> ~/.ssh/known_hosts
        ssh-agent -a $SSH_AUTH_SOCK > /dev/null
        ssh-add - <<< "${{ secrets.SSH_KEY }}"
#    - name: npm install
#      run: npm ci
#    - run: npm run build
    - name: Deploy
      run: npm run deploy
      env:
        DOCKER_HOST: ${{ secrets.DOCKER_HOST }}
        BOT_TOKEN: ${{ secrets.BOT_TOKEN }}
        SSH_AUTH_SOCK: /tmp/ssh_agent.sock
        DOCKER_IMAGE_NAME: eux86/gemini-discord-bot-prod
        DOCKER_CONTAINER_NAME: gemini-discord-bot-prod
        client_email: discord-bot-1@gemini-bot-314114.iam.gserviceaccount.com
        project_id: gemini-bot-314114
        private_key: ${{ secrets.PRIVATE_KEY }}
