name: Deploy

on: [push]

jobs:
  install:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: 16
          cache: 'npm'
          registry-url: https://registry.npmjs.org
      - run: ls -lta
      - run: node -v
      - run: npm -v
      - run: npm ci
  linting:
    runs-on: ubuntu-latest
    needs: [install]
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: 16
          cache: 'npm'
          registry-url: https://registry.npmjs.org
      - run: npm ci
      - run: npm run lint
  testing:
    runs-on: ubuntu-latest
    needs: [ install ]
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: 16
          cache: 'npm'
          registry-url: https://registry.npmjs.org
      - run: npm ci
      - run: npm run test

  building:
    runs-on: ubuntu-latest
    needs: [ install ]
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: 16
          cache: 'npm'
          registry-url: https://registry.npmjs.org
      - run: npm ci
      - run: npm run build

  deploy:
    runs-on: ubuntu-latest
    needs: [building, linting, testing]
    if: github.ref == 'refs/heads/master'
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: 16
          cache: 'npm'
          registry-url: https://registry.npmjs.org
      - name: configure ssh connection
        env:
          SSH_AUTH_SOCK: /tmp/ssh_agent.sock
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan -p ${{ secrets.TEST_PORT}} -t rsa ${{ secrets.TEST_HOST }} >> ~/.ssh/known_hosts
          ssh-agent -a $SSH_AUTH_SOCK > /dev/null
          ssh-add - <<< "${{ secrets.SSH_KEY }}"
      - run: npm ci
      - run: npm run build
      - name: Deploy
        run: npm run deploy
        env:
          DOCKER_HOST: ${{ secrets.DOCKER_HOST }}
          BOT_TOKEN: ${{ secrets.BOT_TOKEN }}
          CLIENT_ID: ${{ secrets.CLIENT_ID }}
          SSH_AUTH_SOCK: /tmp/ssh_agent.sock
          DOCKER_IMAGE_NAME: eux86/gemini-discord-bot-prod
          DOCKER_CONTAINER_NAME: gemini-discord-bot-prod
          client_email: discord-bot-1@gemini-bot-314114.iam.gserviceaccount.com
          project_id: gemini-bot-314114
          private_key: ${{ secrets.PRIVATE_KEY }}
